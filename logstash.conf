input {
  tcp {
    add_field => [ "type", "syslog" ]
    port => "5514"
    ssl_enable => true
    ssl_cert => "/var/vcap/jobs/logstash/config/tls.crt"
    ssl_key => "/var/vcap/jobs/logstash/config/tls.key"
    ssl_verify => false
  }
}

filter {
  ruby {
    code => 'event.cancel if event.get("message") == "\u0000"'
  }
  mutate {
    remove_field => [ "host", "port" ]
  }
  if [type] != '' {
      mutate {
          rename => [ "type", "@type" ]
      }
  }
  if [message] != '' {
      mutate {
          rename => [ "message", "@message" ]
      }
  } else if [message] == '' and [@message] !~ /^.+$/ {
      drop { }
  }
  if [@type] == "" {
      mutate {
          add_field => [ "@type", "unknown" ]
      }
  }
  if [@message] =~ /^\s*$/ or [@message] =~ /^#.*$/ {
      drop { }
  }
  mutate {
      strip => [ "@message" ]
  }

  grok {
      match => { "@message" => "(?:%{INT:syslog6587_msglen} )?<%{POSINT:syslog_pri}>(%{SPACE})?(?:%{NONNEGINT:syslog5424_ver} )?(?:%{SYSLOGTIMESTAMP:syslog_timestamp}|%{TIMESTAMP_ISO8601:syslog_timestamp}) %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?(:)? %{GREEDYDATA:syslog_message}" }
      match => { "@message" => "<%{POSINT:syslog_pri}>(%{SPACE})?%{SYSLOGTIMESTAMP:syslog_timestamp} %{DATA:syslog_program}\[%{POSINT:syslog_pid}\]: %{GREEDYDATA:syslog_message}" }
      add_tag => [ "syslog_standard" ]
      add_field => { "@raw" => "%{@message}"}
      tag_on_failure => ["fail/syslog_standard/_grokparsefailure"]
  }

  if !("fail/syslog_standard/_grokparsefailure" in [tags]) {
      mutate {
          convert => [ "syslog5424_ver", "integer" ]
      }
      if [syslog5424_ver] == 1 {
          grok {
              match => [ "syslog_message", "(?:%{DATA:syslog_procid}|\-) (?:%{DATA:syslog_msgid}|\-)(?: %{SYSLOG5424SD:syslog_sd}| \-)? %{GREEDYDATA:syslog_message}" ]
              overwrite => [ "syslog_message" ]
              tag_on_failure => [ "fail/syslog_standard/_grokparsefailure-syslog_standard-5424" ]
          }
      }
      date {
          match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
          timezone => "UTC"
          remove_field => "syslog_timestamp"
      }
      mutate {
        rename => { 
          "syslog_message" => "@message"
          "syslog_hostname" => "@hostname"
          "syslog_program" => "@program"
        }
        remove_field => ["syslog_facility", "syslog_facility_code", "syslog_pid", "syslog_pri", "syslog_severity", "syslog_severity_code", "syslog_procid", "syslog_msgid", "syslog_sd"]
      }
      if [@program] == "audispd" {
        drop{ }
      }
      if [@program] == "bosh-dns" {
        drop{ }
      }
      if [@program] == "doppler" {
        json {
          source => "@message"
          target => "@body"
          remove_field => ["@message"]
        }
        ruby {
          code => 'event.set("[@body][msg]", event.get("[@body][msg]").gsub("\\n", "\n"))'
        }
        mutate {
          replace => { "@type" => "firehose" }
          rename => { 
            "[@body][msg]" => "@message"
            "[@body][cf_app_id]" => "cf_app_id"
            "[@body][cf_app_name]" => "cf_app_name"
            "[@body][cf_ignored_app]" => "cf_ignored_app"
            "[@body][cf_org_id]" => "cf_org_id"
            "[@body][cf_org_name]" => "cf_org_name"
            "[@body][cf_origin]" => "cf_origin"
            "[@body][cf_space_id]" => "cf_space_id"
            "[@body][cf_space_name]" => "cf_space_name"
            "[@body][deployment]" => "deployment"
            "[@body][event_type]" => "event_type"
            "[@body][ip]" => "ip"
            "[@body][job]" => "job"
            "[@body][job_index]" => "job_index"
            "[@body][level]" => "level"
            "[@body][message_type]" => "message_type"
            "[@body][origin]" => "origin"
            "[@body][source_instance]" => "source_instance"
            "[@body][source_type]" => "source_type"
            "[@body][time]" => "time"
            "[@body][timestamp]" => "timestamp"
            "[@body][content_length]" => "content_length"
            "[@body][duration_ms]" => "duration_ms"
            "[@body][forwarded]" => "forwarded"
            "[@body][instance_id]" => "instance_id"
            "[@body][instance_index]" => "instance_index"
            "[@body][method]" => "method"
            "[@body][peer_type]" => "peer_type"
            "[@body][remote_addr]" => "remote_addr"
            "[@body][request_id]" => "request_id"
            "[@body][start_timestamp]" => "start_timestamp"
            "[@body][status_code]" => "status_code"
            "[@body][stop_timestamp]" => "stop_timestamp"
            "[@body][uri]" => "uri"
            "[@body][user_agent]" => "user_agent"
          }
          add_field => { "@app" => "%{cf_app_name}"}
          remove_field => [ "cf_ignored_app", "timestamp" ]
        }

        if ('APP/PROC/WEB' in [source_type]) {
          grok {
            match => { "@message" => '%{TIMESTAMP_ISO8601:datetime} +%{NOTSPACE:log_level} \[%{DATA:spring_app_name},%{DATA:trace_id},%{DATA:span_id},%{DATA:exportable}.*\] %{INT:pid} --- \[%{NOTSPACE:thread_name}\] %{NOTSPACE:logger} +: %{GREEDYDATA:log_message}' }
          }
        }
        if ('RTR' in [source_type]) {
          grok {
            match => { "@message" => '%{HOSTNAME:host} - \[%{TIMESTAMP_ISO8601:timestamp}\] "%{NOTSPACE:method} %{NOTSPACE:path} HTTP/%{NUMBER:httpversion}" %{NUMBER:status:int} %{NUMBER:bytes:int} \d+ "%{GREEDYDATA:referer}" "%{GREEDYDATA:user_agent}" ".*" ".*" x_forwarded_for:"%{GREEDYDATA:x_forwarded_for}" .* vcap_request_id:"%{NOTSPACE:vcap_request_id}" response_time:%{NUMBER:response_time:float} app_id:"%{NOTSPACE:app_id}" .* x_b3_traceid:"%{NOTSPACE:trace_id}" x_b3_spanid:"%{NOTSPACE:span_id}" x_b3_parentspanid:"%{NOTSPACE:parent_span_id}"' }
          }
        }

      } else {
        ruby {
          code => 'event.set("@message", event.get("@message").gsub("\\n", "\n"))'
        }
        mutate {
          add_field => { "@app" => "%{@hostname}"}
        }
      }
  }
}

output { 
  stdout { 
    codec => "json_lines" 
  }
  if [@type] == "firehose" {
    elasticsearch {
      hosts => __ES_HOSTS__
      user => "__ES_USERNAME__"
      password => "__ES_PASSWORD__"
      index => "firehose-%{+YYYY.MM.dd}"
      ssl_certificate_verification => false
    }
  } else {
     elasticsearch {
      hosts => __ES_HOSTS__
      user => "__ES_USERNAME__"
      password => "__ES_PASSWORD__"
      index => "syslog-%{+YYYY.MM.dd}"
      ssl_certificate_verification => false
    } 
  }
}
